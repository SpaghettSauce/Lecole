#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
	int list[10] = { 1,2,3,4,5,6,7,8,9,0 }; //массив,структура данных, хранящая значения, имеющие свой индвидуальный индекс (их место в массиве)
    //счет введется с 0, так у 1 индекс[0], у 2 [1] и тд
	int mas[10]; //10, это его размер - сколько элементов мы можем в него запихнуть
	srand(time(NULL));
	for (int i = 0; i < 10; i++) //пройдемся по всем элементам с индексами от 0 до 10
	{
		int index = rand() % 10; //зададим рандомное число от 0 до 10
		mas[i] = list[index]; //запихнем это рандомное число в пустой массив
	}//так этот for прошёлся по всем индесам mas и приписал на все места рандомные числа от 0 до 10

	for (int i = 0; i < 10; i++)
		cout << mas[i] << " ";//вывод элементов этого массива(так же по элементно через for)

	// Многомерные массивы
	int matrix[3][3]; //это массивы элементы которого - массивы, чтобы  представить нарисуйте матрицу ->        0 1 2  <-0,1,2 индексы, остальные числа ввел пользователь
    for (int i = 0; i < 3; i++)    //для первого индекса                                                   // 0 5 7 3
		for (int j = 0; j < 3; j++)//для второго                                                           // 1 7 0 1
			cin >> matrix[i][j]; //запишем с клавиатуры элементы                                           // 2 1 2 3 

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
			cout << matrix[i][j] << " ";
		cout << endl;
	}
    int m[2][2] = { {1,2}, {3,4} };//пример задания двумерного массива с элементами
	

	// Инициализация массива случайными числами
	srand(time(NULL));//функция работы с генератором рандомного числа
	int mas_rand[1000];
	for (int i = 0; i < 1000; i++)
	{
		mas_rand[i] = rand(); //от 0.. до 32767
		mas_rand[i] = rand() % 10; //от 0.. до 9
	}

	// Задача-Пример: Ввести n целых чисел (0 < n < 10000) и отсортировать по возрастанию

	
	int digits[10];

	int n;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cin >> mas[i];
		
		// Вытащить первую цифру
		int tmp = mas[i];
		while (tmp > 9)
			tmp /= 10;
		digits[i] = tmp;
		cout << digits[i] << endl;
	}

	// Сортировка обменами (swap sort)
	for(int i=0;i<n-1;i++)
		for(int j=i+1;j<n;j++)
			
			if ((digits[i] > digits[j]) || (digits[i] == digits[j] && mas[i] > mas[j]))
			{
				
				int tmp = mas[i];
				mas[i] = mas[j];
				mas[j] = tmp;
				tmp = digits[i];
				digits[i] = digits[j];
				digits[j] = tmp;
			}

	for (int i = 0; i < n; i++)
		cout << mas[i] << endl;


	// Поиск максимума в последовательности натуральных чисел

	int N;
	cin >> N;
	int max = INT_MIN;  

	bool isFirstNumber = true;
	for (int i = 0; i < N; i++)
	{
		int a;
		cin >> a;
		if (isFirstNumber)
		{
			isFirstNumber = false;
			max = a;
		}

		if (a > max)
			max = a;
	}
	cout << max << endl;
	
	//сортировка массива через функцию sort (нужна библиотека algorithm)
	int lol[5]={1,6,2,8,4};
	int len = sizeof(lol)/sizeof(lol[0]);
	sort(lol,lol + len); //от какого элемента до какого, lol-первый, lol+длина массива - последний
	for(int i=0; i<len; i++)
    	{
        	cout<<" "<<lol[i];
    	}
return 0;
}

//Задачи на закрепление :)

//Дана последовательность натуральных чисел {aj}j=1...n (n<=10000). Если в последовательности есть хотя бы одно число, начинающееся цифрой 1,
//упорядочить последовательность по неубыванию.

//Дана последовательность натуральных чисел {aj}j=1...n (n<=10000). Если в последовательности нет ни одного простого числа, 
//упорядочить последовательность по невозрастанию.

//Дана целочисленная матрица {Aij}i=1..n,j=1..m (n,m<=100). Если есть строка где попадаются два подряд 0 то
//заменить все элементы этой строки числом 9999.