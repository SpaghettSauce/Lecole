/*На вход подаётся строка, состоящая из скобок. 
Программа должна определить правильность введённого скобочного выражения. 
Пример (()) - правильно,(()()) - правильно,(()( - не правильно*/
//простецкий пример выполнения
/*#include <iostream>
#include <string>
using namespace std;

int main() {
    string expr;
    cout << "Выражение: ";
    cin >> expr;

    int open_close = 0;
    for (int i = 0; i < expr.length(); ++i) {
        if (expr[i] == '(') {
            open_close += 1;
        } else if (expr[i] == ')') {
            open_close -= 1;
        }
    }

    if (open_close != 0) {
        cout << "Нарушены скобки" << endl;
    }

    return 0;
}*/
/*Сортировка пузырьком, метод сортировки элементов, в котором сравниваются два соседних элемента,
если один больше другого, то меняем их местами, алгоритм выполняется пока весь массив не окажется отсортированным
Пример: 16372, 1<6 оставляем, 6>3 меняем: 13672, 6<7 оставляем, 7>2 меняем: 13627, 7 самый большой элемент в конце,супер, 
проходимся по массиву ещё раз: 1<3, 3<6, 6>2 меняем: 13267, 6<7, теперь 6 100% на своем месте, пройдемся ещё раз:
1<3,3>2 меняем: 12367 - а вот и наш отсортированный массив yay
время выполнения алгоритма в среднем O(n^2), где n количестов элементов. В лучшем случае O(n) (к примеру когда массив уже отсортирован)

*/
//пример реализации сортировки пузырьком
#include <iostream>
using namespace std;
int main() {
    int arr[] = {6, 3, 1, 5, 11},temp; //Задаем наш массив с его элементами
    int getArrayLength = sizeof(arr) / sizeof(int); //получаем длину массива
    for (int i = 0; i < getArrayLength-1; i++) { //идем от 0 элемента,до последнего, тоесть размер массива -1 потому что считаем с 0 
        for (int j = 0; j < getArrayLength - i - 1; j++) {//проходим до размер массива - i - 1 чтобы не вылететь за границы массива
            if (arr[j] > arr[j + 1]) { // j=0, если arr[j](цифра 6) больше arr[j+1](цифры 3)
                swap(arr[j], arr[j + 1]);// меняем их местами
            }
        }
    }

cout << "Отсортированный массив: \n"; //вывод отсортированного массива
for (int i = 0; i < getArrayLength; i++) 
    std::cout << " " << arr[i];
    
return 0;
}
//насчет длины массива, почему так делаем?
//потому что sizeof(arr) даст нам длину массива в байтах, тоесть 20 в нашем случае, поэтому делим sizeof (arr) на sizeof(int)
